; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\users\administrator\desktop\c\cr31\?????\??\20190125\shellcode\shellcode\shellcode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ; MyGetProcAddress
PUBLIC	?mymemcpy@@YAPAXPAXPBXI@Z			; mymemcpy
PUBLIC	?mymemcmp@@YAHPBX0I@Z				; mymemcmp
PUBLIC	?GetKernel32@@YAPAUHINSTANCE__@@XZ		; GetKernel32
PUBLIC	?GetMainMdouleHandle@@YAPAUHINSTANCE__@@XZ	; GetMainMdouleHandle
PUBLIC	?HandlePE@@YAKPAEKK@Z				; HandlePE
PUBLIC	?MyStrlen@@YAKPBD@Z				; MyStrlen
PUBLIC	?MyStrcmp@@YAHPBD0@Z				; MyStrcmp
PUBLIC	?HandleIAT@@YAKK@Z				; HandleIAT
PUBLIC	?EraseData@@YAXPADI@Z				; EraseData
PUBLIC	?Start@@YAXXZ					; Start
PUBLIC	?CheckDebug2@@YAHXZ				; CheckDebug2
PUBLIC	?CheckDebug@@YAHXZ				; CheckDebug
PUBLIC	?MyDecrypt@@YA_NPAEIK@Z				; MyDecrypt
; Function compile flags: /Odtp
;	COMDAT ?MyDecrypt@@YA_NPAEIK@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_src$ = 8						; size = 4
_size$ = 12						; size = 4
_key$ = 16						; size = 4
?MyDecrypt@@YA_NPAEIK@Z PROC				; MyDecrypt, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 67
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@MyDecrypt
$LN2@MyDecrypt:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@MyDecrypt:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN3@MyDecrypt
; Line 69
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [ecx], al
; Line 70
	jmp	SHORT $LN2@MyDecrypt
$LN3@MyDecrypt:
; Line 72
	mov	al, 1
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	0
?MyDecrypt@@YA_NPAEIK@Z ENDP				; MyDecrypt
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?CheckDebug@@YAHXZ
_TEXT	SEGMENT
_result$ = -1						; size = 1
?CheckDebug@@YAHXZ PROC					; CheckDebug, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 76
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 77
	mov	BYTE PTR _result$[ebp], 0
; Line 80
	mov	eax, DWORD PTR fs:48
; Line 81
	mov	al, BYTE PTR [eax+2]
; Line 82
	mov	BYTE PTR _result$[ebp], al
; Line 84
	movzx	eax, BYTE PTR _result$[ebp]
; Line 85
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckDebug@@YAHXZ ENDP					; CheckDebug
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?CheckDebug2@@YAHXZ
_TEXT	SEGMENT
_result$ = -4						; size = 4
?CheckDebug2@@YAHXZ PROC				; CheckDebug2, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 89
	mov	DWORD PTR _result$[ebp], 0
; Line 92
	mov	eax, DWORD PTR fs:48
; Line 93
	mov	eax, DWORD PTR [eax+104]
; Line 94
	and	eax, 112				; 00000070H
; Line 95
	mov	DWORD PTR _result$[ebp], eax
; Line 97
	mov	eax, DWORD PTR _result$[ebp]
; Line 98
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckDebug2@@YAHXZ ENDP				; CheckDebug2
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Start@@YAXXZ
_TEXT	SEGMENT
_szGetProcAddress$ = -124				; size = 15
_szVirtualAlloc$ = -108					; size = 13
_szLoadLibraryA$ = -92					; size = 13
_dwOldProtect$ = -76					; size = 4
_dwAddrOfShellCodeSec$ = -72				; size = 4
_pfnLoadLibraryA$ = -68					; size = 4
_dwOep$ = -64						; size = 4
_SrcOffset$ = -60					; size = 4
_SrcSize$ = -56						; size = 4
_dwAddrOfPeData$ = -52					; size = 4
_dwAddrOfPeHeader$ = -48				; size = 4
_pfnVirtualAlloc$ = -44					; size = 4
_DataSize$ = -40					; size = 4
_pOptHdr$ = -36						; size = 4
_pFileHdr$ = -32					; size = 4
_pDosHdr$ = -28						; size = 4
_pfnGetProcAddress$ = -24				; size = 4
_pNtHdr$ = -20						; size = 4
_hKernel32$ = -16					; size = 4
_pDecomData$ = -12					; size = 4
_hModMain$ = -8						; size = 4
_pSectHdr$ = -4						; size = 4
?Start@@YAXXZ PROC					; Start, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
; Line 104
	call	?CheckDebug@@YAHXZ			; CheckDebug
	test	eax, eax
	je	SHORT $LN2@Start
; Line 106
	jmp	$LN1@Start
$LN2@Start:
; Line 108
	call	?CheckDebug2@@YAHXZ			; CheckDebug2
	test	eax, eax
	je	SHORT $LN3@Start
; Line 110
	jmp	$LN1@Start
$LN3@Start:
; Line 112
	call	?GetKernel32@@YAPAUHINSTANCE__@@XZ	; GetKernel32
	mov	DWORD PTR _hKernel32$[ebp], eax
; Line 113
	mov	BYTE PTR _szLoadLibraryA$[ebp], 76	; 0000004cH
	mov	BYTE PTR _szLoadLibraryA$[ebp+1], 111	; 0000006fH
	mov	BYTE PTR _szLoadLibraryA$[ebp+2], 97	; 00000061H
	mov	BYTE PTR _szLoadLibraryA$[ebp+3], 100	; 00000064H
	mov	BYTE PTR _szLoadLibraryA$[ebp+4], 76	; 0000004cH
	mov	BYTE PTR _szLoadLibraryA$[ebp+5], 105	; 00000069H
	mov	BYTE PTR _szLoadLibraryA$[ebp+6], 98	; 00000062H
	mov	BYTE PTR _szLoadLibraryA$[ebp+7], 114	; 00000072H
	mov	BYTE PTR _szLoadLibraryA$[ebp+8], 97	; 00000061H
	mov	BYTE PTR _szLoadLibraryA$[ebp+9], 114	; 00000072H
	mov	BYTE PTR _szLoadLibraryA$[ebp+10], 121	; 00000079H
	mov	BYTE PTR _szLoadLibraryA$[ebp+11], 65	; 00000041H
	mov	BYTE PTR _szLoadLibraryA$[ebp+12], 0
; Line 114
	mov	BYTE PTR _szGetProcAddress$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetProcAddress$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+2], 116	; 00000074H
	mov	BYTE PTR _szGetProcAddress$[ebp+3], 80	; 00000050H
	mov	BYTE PTR _szGetProcAddress$[ebp+4], 114	; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+5], 111	; 0000006fH
	mov	BYTE PTR _szGetProcAddress$[ebp+6], 99	; 00000063H
	mov	BYTE PTR _szGetProcAddress$[ebp+7], 65	; 00000041H
	mov	BYTE PTR _szGetProcAddress$[ebp+8], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+9], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+10], 114 ; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+11], 101 ; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+12], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+13], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+14], 0
; Line 115
	mov	BYTE PTR _szVirtualAlloc$[ebp], 86	; 00000056H
	mov	BYTE PTR _szVirtualAlloc$[ebp+1], 105	; 00000069H
	mov	BYTE PTR _szVirtualAlloc$[ebp+2], 114	; 00000072H
	mov	BYTE PTR _szVirtualAlloc$[ebp+3], 116	; 00000074H
	mov	BYTE PTR _szVirtualAlloc$[ebp+4], 117	; 00000075H
	mov	BYTE PTR _szVirtualAlloc$[ebp+5], 97	; 00000061H
	mov	BYTE PTR _szVirtualAlloc$[ebp+6], 108	; 0000006cH
	mov	BYTE PTR _szVirtualAlloc$[ebp+7], 65	; 00000041H
	mov	BYTE PTR _szVirtualAlloc$[ebp+8], 108	; 0000006cH
	mov	BYTE PTR _szVirtualAlloc$[ebp+9], 108	; 0000006cH
	mov	BYTE PTR _szVirtualAlloc$[ebp+10], 111	; 0000006fH
	mov	BYTE PTR _szVirtualAlloc$[ebp+11], 99	; 00000063H
	mov	BYTE PTR _szVirtualAlloc$[ebp+12], 0
; Line 119
	lea	eax, DWORD PTR _szLoadLibraryA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKernel32$[ebp]
	push	ecx
	call	?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ; MyGetProcAddress
	mov	DWORD PTR _pfnLoadLibraryA$[ebp], eax
; Line 120
	lea	edx, DWORD PTR _szGetProcAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernel32$[ebp]
	push	eax
	call	?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ; MyGetProcAddress
	mov	DWORD PTR _pfnGetProcAddress$[ebp], eax
; Line 121
	lea	ecx, DWORD PTR _szVirtualAlloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKernel32$[ebp]
	push	edx
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	DWORD PTR _pfnVirtualAlloc$[ebp], eax
; Line 127
	call	?GetMainMdouleHandle@@YAPAUHINSTANCE__@@XZ ; GetMainMdouleHandle
	mov	DWORD PTR _hModMain$[ebp], eax
; Line 128
	mov	eax, DWORD PTR _hModMain$[ebp]
	mov	DWORD PTR _pDosHdr$[ebp], eax
; Line 129
	mov	ecx, DWORD PTR _pDosHdr$[ebp]
	mov	edx, DWORD PTR _hModMain$[ebp]
	add	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _pNtHdr$[ebp], edx
; Line 130
	mov	eax, DWORD PTR _pNtHdr$[ebp]
	add	eax, 4
	mov	DWORD PTR _pFileHdr$[ebp], eax
; Line 131
	mov	ecx, DWORD PTR _pNtHdr$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _pOptHdr$[ebp], ecx
; Line 132
	mov	edx, DWORD PTR _pFileHdr$[ebp]
	movzx	eax, WORD PTR [edx+16]
	add	eax, DWORD PTR _pOptHdr$[ebp]
	mov	DWORD PTR _pSectHdr$[ebp], eax
; Line 141
	mov	ecx, 40					; 00000028H
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _pSectHdr$[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	add	ecx, DWORD PTR _hModMain$[ebp]
	mov	DWORD PTR _dwAddrOfShellCodeSec$[ebp], ecx
; Line 142
	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	eax, DWORD PTR _pSectHdr$[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	add	ecx, DWORD PTR _hModMain$[ebp]
	mov	DWORD PTR _dwAddrOfPeHeader$[ebp], ecx
; Line 143
	mov	edx, 40					; 00000028H
	shl	edx, 1
	mov	eax, DWORD PTR _pSectHdr$[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	add	ecx, DWORD PTR _hModMain$[ebp]
	mov	DWORD PTR _dwAddrOfPeData$[ebp], ecx
; Line 145
	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	mov	ecx, DWORD PTR _pSectHdr$[ebp]
	mov	edx, DWORD PTR [ecx+edx+16]
	mov	ecx, DWORD PTR _pSectHdr$[ebp]
	add	edx, DWORD PTR [ecx+eax+16]
	mov	DWORD PTR _DataSize$[ebp], edx
; Line 146
	push	64					; 00000040H
	push	4096					; 00001000H
	mov	edx, DWORD PTR _DataSize$[ebp]
	push	edx
	push	0
	call	DWORD PTR _pfnVirtualAlloc$[ebp]
	mov	DWORD PTR _pDecomData$[ebp], eax
; Line 147
	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _pSectHdr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	push	edx
	mov	eax, DWORD PTR _dwAddrOfPeHeader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDecomData$[ebp]
	push	ecx
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 148
	mov	edx, 40					; 00000028H
	shl	edx, 1
	mov	eax, DWORD PTR _pSectHdr$[ebp]
	mov	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	edx, DWORD PTR _dwAddrOfPeData$[ebp]
	push	edx
	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _pSectHdr$[ebp]
	mov	edx, DWORD PTR _pDecomData$[ebp]
	add	edx, DWORD PTR [ecx+eax+16]
	push	edx
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 150
	push	77					; 0000004dH
	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _pSectHdr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	push	edx
	mov	eax, DWORD PTR _pDecomData$[ebp]
	push	eax
	call	?MyDecrypt@@YA_NPAEIK@Z			; MyDecrypt
	add	esp, 12					; 0000000cH
; Line 151
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	mov	edx, DWORD PTR _pSectHdr$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _SrcSize$[ebp], eax
; Line 152
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	mov	edx, DWORD PTR _pSectHdr$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _SrcOffset$[ebp], eax
; Line 154
	mov	DWORD PTR _dwOldProtect$[ebp], 0
; Line 159
	mov	ecx, DWORD PTR _SrcSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SrcOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDecomData$[ebp]
	push	eax
	call	?HandlePE@@YAKPAEKK@Z			; HandlePE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dwOep$[ebp], eax
; Line 161
	jmp	DWORD PTR _dwOep$[ebp]
$LN1@Start:
; Line 162
	mov	esp, ebp
	pop	ebp
	ret	0
?Start@@YAXXZ ENDP					; Start
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?EraseData@@YAXPADI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_pStr$ = 8						; size = 4
_nSize$ = 12						; size = 4
?EraseData@@YAXPADI@Z PROC				; EraseData, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 165
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 166
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@EraseData
$LN2@EraseData:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@EraseData:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _nSize$[ebp]
	jae	SHORT $LN1@EraseData
; Line 168
	mov	edx, DWORD PTR _pStr$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [edx], 0
; Line 169
	jmp	SHORT $LN2@EraseData
$LN1@EraseData:
; Line 170
	mov	esp, ebp
	pop	ebp
	ret	0
?EraseData@@YAXPADI@Z ENDP				; EraseData
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?HandleIAT@@YAKK@Z
_TEXT	SEGMENT
_szGetProcAddress$ = -60				; size = 15
_szVirtualAlloc$ = -44					; size = 13
_szCode$ = -28						; size = 12
_pfnVirtualAlloc$ = -16					; size = 4
_pfnGetProcAddress$ = -12				; size = 4
_hKernel32$ = -8					; size = 4
_pDst$ = -4						; size = 4
_dwAddr$ = 8						; size = 4
?HandleIAT@@YAKK@Z PROC					; HandleIAT, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
; Line 174
	mov	BYTE PTR _szCode$[ebp], 81		; 00000051H
	mov	BYTE PTR _szCode$[ebp+1], 83		; 00000053H
	mov	BYTE PTR _szCode$[ebp+2], 91		; 0000005bH
	mov	BYTE PTR _szCode$[ebp+3], 89		; 00000059H
	mov	BYTE PTR _szCode$[ebp+4], 104		; 00000068H
	mov	BYTE PTR _szCode$[ebp+5], 0
	mov	BYTE PTR _szCode$[ebp+6], 0
	mov	BYTE PTR _szCode$[ebp+7], 0
	mov	BYTE PTR _szCode$[ebp+8], 0
	mov	BYTE PTR _szCode$[ebp+9], -61		; ffffffc3H
	mov	BYTE PTR _szCode$[ebp+10], -61		; ffffffc3H
	xor	eax, eax
	mov	BYTE PTR _szCode$[ebp+11], al
; Line 175
	push	4
	lea	ecx, DWORD PTR _dwAddr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szCode$[ebp+5]
	push	edx
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 177
	call	?GetKernel32@@YAPAUHINSTANCE__@@XZ	; GetKernel32
	mov	DWORD PTR _hKernel32$[ebp], eax
; Line 178
	mov	BYTE PTR _szGetProcAddress$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetProcAddress$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+2], 116	; 00000074H
	mov	BYTE PTR _szGetProcAddress$[ebp+3], 80	; 00000050H
	mov	BYTE PTR _szGetProcAddress$[ebp+4], 114	; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+5], 111	; 0000006fH
	mov	BYTE PTR _szGetProcAddress$[ebp+6], 99	; 00000063H
	mov	BYTE PTR _szGetProcAddress$[ebp+7], 65	; 00000041H
	mov	BYTE PTR _szGetProcAddress$[ebp+8], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+9], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+10], 114 ; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+11], 101 ; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+12], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+13], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+14], 0
; Line 179
	mov	BYTE PTR _szVirtualAlloc$[ebp], 86	; 00000056H
	mov	BYTE PTR _szVirtualAlloc$[ebp+1], 105	; 00000069H
	mov	BYTE PTR _szVirtualAlloc$[ebp+2], 114	; 00000072H
	mov	BYTE PTR _szVirtualAlloc$[ebp+3], 116	; 00000074H
	mov	BYTE PTR _szVirtualAlloc$[ebp+4], 117	; 00000075H
	mov	BYTE PTR _szVirtualAlloc$[ebp+5], 97	; 00000061H
	mov	BYTE PTR _szVirtualAlloc$[ebp+6], 108	; 0000006cH
	mov	BYTE PTR _szVirtualAlloc$[ebp+7], 65	; 00000041H
	mov	BYTE PTR _szVirtualAlloc$[ebp+8], 108	; 0000006cH
	mov	BYTE PTR _szVirtualAlloc$[ebp+9], 108	; 0000006cH
	mov	BYTE PTR _szVirtualAlloc$[ebp+10], 111	; 0000006fH
	mov	BYTE PTR _szVirtualAlloc$[ebp+11], 99	; 00000063H
	mov	BYTE PTR _szVirtualAlloc$[ebp+12], 0
; Line 181
	lea	eax, DWORD PTR _szGetProcAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKernel32$[ebp]
	push	ecx
	call	?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ; MyGetProcAddress
	mov	DWORD PTR _pfnGetProcAddress$[ebp], eax
; Line 182
	lea	edx, DWORD PTR _szVirtualAlloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernel32$[ebp]
	push	eax
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	DWORD PTR _pfnVirtualAlloc$[ebp], eax
; Line 183
	push	64					; 00000040H
	push	4096					; 00001000H
	push	12					; 0000000cH
	push	0
	call	DWORD PTR _pfnVirtualAlloc$[ebp]
	mov	DWORD PTR _pDst$[ebp], eax
; Line 184
	cmp	DWORD PTR _pDst$[ebp], 0
	jne	SHORT $LN2@HandleIAT
; Line 186
	xor	eax, eax
	jmp	SHORT $LN1@HandleIAT
$LN2@HandleIAT:
; Line 188
	push	12					; 0000000cH
	lea	ecx, DWORD PTR _szCode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDst$[ebp]
	push	edx
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 190
	mov	eax, DWORD PTR _pDst$[ebp]
$LN1@HandleIAT:
; Line 191
	mov	esp, ebp
	pop	ebp
	ret	0
?HandleIAT@@YAKK@Z ENDP					; HandleIAT
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?MyStrcmp@@YAHPBD0@Z
_TEXT	SEGMENT
_dwStrlen2$ = -16					; size = 4
_dwStrlen1$ = -12					; size = 4
_dwCount$ = -8						; size = 4
_cRes$ = -1						; size = 1
_string1$ = 8						; size = 4
_string2$ = 12						; size = 4
?MyStrcmp@@YAHPBD0@Z PROC				; MyStrcmp, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 195
	mov	eax, DWORD PTR _string1$[ebp]
	push	eax
	call	?MyStrlen@@YAKPBD@Z			; MyStrlen
	add	esp, 4
	mov	DWORD PTR _dwStrlen1$[ebp], eax
; Line 196
	mov	ecx, DWORD PTR _string2$[ebp]
	push	ecx
	call	?MyStrlen@@YAKPBD@Z			; MyStrlen
	add	esp, 4
	mov	DWORD PTR _dwStrlen2$[ebp], eax
; Line 197
	mov	BYTE PTR _cRes$[ebp], 0
; Line 199
	mov	DWORD PTR _dwCount$[ebp], 0
$LN2@MyStrcmp:
; Line 200
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@MyStrcmp
; Line 202
	mov	eax, DWORD PTR _string1$[ebp]
	add	eax, DWORD PTR _dwCount$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _string2$[ebp]
	add	edx, DWORD PTR _dwCount$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	BYTE PTR _cRes$[ebp], cl
; Line 203
	movsx	ecx, BYTE PTR _cRes$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@MyStrcmp
; Line 205
	movsx	eax, BYTE PTR _cRes$[ebp]
	jmp	SHORT $LN1@MyStrcmp
$LN4@MyStrcmp:
; Line 208
	mov	edx, DWORD PTR _dwCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _dwCount$[ebp], edx
; Line 209
	mov	eax, DWORD PTR _dwCount$[ebp]
	cmp	eax, DWORD PTR _dwStrlen1$[ebp]
	jae	SHORT $LN6@MyStrcmp
	mov	ecx, DWORD PTR _dwCount$[ebp]
	cmp	ecx, DWORD PTR _dwStrlen2$[ebp]
	jb	SHORT $LN5@MyStrcmp
$LN6@MyStrcmp:
; Line 211
	jmp	SHORT $LN3@MyStrcmp
$LN5@MyStrcmp:
; Line 213
	jmp	SHORT $LN2@MyStrcmp
$LN3@MyStrcmp:
; Line 215
	xor	eax, eax
$LN1@MyStrcmp:
; Line 216
	mov	esp, ebp
	pop	ebp
	ret	0
?MyStrcmp@@YAHPBD0@Z ENDP				; MyStrcmp
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?MyStrlen@@YAKPBD@Z
_TEXT	SEGMENT
_dwLen$ = -4						; size = 4
_string$ = 8						; size = 4
?MyStrlen@@YAKPBD@Z PROC				; MyStrlen, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 219
	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
; Line 220
	mov	DWORD PTR _dwLen$[ebp], 0
; Line 223
	mov	ecx, -1
; Line 224
	mov	edi, DWORD PTR _string$[ebp]
; Line 225
	xor	eax, eax
; Line 226
	repnz	 scasb
; Line 227
	not	ecx
; Line 228
	dec	ecx
; Line 230
	mov	DWORD PTR _dwLen$[ebp], ecx
; Line 233
	mov	eax, DWORD PTR _dwLen$[ebp]
; Line 234
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
?MyStrlen@@YAKPBD@Z ENDP				; MyStrlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?HandlePE@@YAKPAEKK@Z
_TEXT	SEGMENT
_pdwIAT$ = -212						; size = 4
_EndImpTable$ = -208					; size = 20
_dwOldProtect$ = -188					; size = 4
_pdwImport$ = -184					; size = 4
_dwSizeOfOptHdr$ = -180					; size = 4
_dwFileHeaderAddr$ = -176				; size = 4
_dwOEP$ = -172						; size = 4
_dwFuncAddr$1 = -168					; size = 4
_pfnLoadLibraryA$ = -164				; size = 4
_nRet$2 = -160						; size = 4
_dwNumOfSecs$ = -156					; size = 4
_dwSizeOfHdrs$ = -152					; size = 4
_pfnVirtualProtect$ = -148				; size = 4
_dwSizeToCpy$ = -144					; size = 4
_dwOptionalHeaderAddr$ = -140				; size = 4
_pFileHdr$ = -136					; size = 4
_pNtHeader$ = -132					; size = 4
_pDllName$ = -128					; size = 4
_pDstAddr$ = -124					; size = 4
_pSrcAddr$ = -120					; size = 4
_i$3 = -116						; size = 4
_pOptionalHdr$ = -112					; size = 4
_pDosHeader$ = -108					; size = 4
_hKernel32$ = -104					; size = 4
_wOrder$4 = -100					; size = 2
_szVirtualProtect$ = -96				; size = 15
_szGetProcAddress$ = -80				; size = 15
_szLoadLibraryA$ = -64					; size = 13
_szTarget$5 = -48					; size = 8
_pfnGetProcAddress$ = -40				; size = 4
_hLib$6 = -36						; size = 4
_pSecHdrs$ = -32					; size = 4
_dwINT$ = -28						; size = 4
_pName$7 = -24						; size = 4
_bRet$ = -17						; size = 1
_hModule$ = -16						; size = 4
_dwIAT$ = -12						; size = 4
tv230 = -5						; size = 1
_pImpTable$ = -4					; size = 4
_pDecomDataBuff$ = 8					; size = 4
_SrcOffset$ = 12					; size = 4
_SrcSize$ = 16						; size = 4
?HandlePE@@YAKPAEKK@Z PROC				; HandlePE, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
; Line 239
	call	?GetKernel32@@YAPAUHINSTANCE__@@XZ	; GetKernel32
	mov	DWORD PTR _hKernel32$[ebp], eax
; Line 240
	mov	BYTE PTR _szLoadLibraryA$[ebp], 76	; 0000004cH
	mov	BYTE PTR _szLoadLibraryA$[ebp+1], 111	; 0000006fH
	mov	BYTE PTR _szLoadLibraryA$[ebp+2], 97	; 00000061H
	mov	BYTE PTR _szLoadLibraryA$[ebp+3], 100	; 00000064H
	mov	BYTE PTR _szLoadLibraryA$[ebp+4], 76	; 0000004cH
	mov	BYTE PTR _szLoadLibraryA$[ebp+5], 105	; 00000069H
	mov	BYTE PTR _szLoadLibraryA$[ebp+6], 98	; 00000062H
	mov	BYTE PTR _szLoadLibraryA$[ebp+7], 114	; 00000072H
	mov	BYTE PTR _szLoadLibraryA$[ebp+8], 97	; 00000061H
	mov	BYTE PTR _szLoadLibraryA$[ebp+9], 114	; 00000072H
	mov	BYTE PTR _szLoadLibraryA$[ebp+10], 121	; 00000079H
	mov	BYTE PTR _szLoadLibraryA$[ebp+11], 65	; 00000041H
	mov	BYTE PTR _szLoadLibraryA$[ebp+12], 0
; Line 241
	mov	BYTE PTR _szGetProcAddress$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetProcAddress$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+2], 116	; 00000074H
	mov	BYTE PTR _szGetProcAddress$[ebp+3], 80	; 00000050H
	mov	BYTE PTR _szGetProcAddress$[ebp+4], 114	; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+5], 111	; 0000006fH
	mov	BYTE PTR _szGetProcAddress$[ebp+6], 99	; 00000063H
	mov	BYTE PTR _szGetProcAddress$[ebp+7], 65	; 00000041H
	mov	BYTE PTR _szGetProcAddress$[ebp+8], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+9], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+10], 114 ; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+11], 101 ; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+12], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+13], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+14], 0
; Line 242
	mov	BYTE PTR _szVirtualProtect$[ebp], 86	; 00000056H
	mov	BYTE PTR _szVirtualProtect$[ebp+1], 105	; 00000069H
	mov	BYTE PTR _szVirtualProtect$[ebp+2], 114	; 00000072H
	mov	BYTE PTR _szVirtualProtect$[ebp+3], 116	; 00000074H
	mov	BYTE PTR _szVirtualProtect$[ebp+4], 117	; 00000075H
	mov	BYTE PTR _szVirtualProtect$[ebp+5], 97	; 00000061H
	mov	BYTE PTR _szVirtualProtect$[ebp+6], 108	; 0000006cH
	mov	BYTE PTR _szVirtualProtect$[ebp+7], 80	; 00000050H
	mov	BYTE PTR _szVirtualProtect$[ebp+8], 114	; 00000072H
	mov	BYTE PTR _szVirtualProtect$[ebp+9], 111	; 0000006fH
	mov	BYTE PTR _szVirtualProtect$[ebp+10], 116 ; 00000074H
	mov	BYTE PTR _szVirtualProtect$[ebp+11], 101 ; 00000065H
	mov	BYTE PTR _szVirtualProtect$[ebp+12], 99	; 00000063H
	mov	BYTE PTR _szVirtualProtect$[ebp+13], 116 ; 00000074H
	mov	BYTE PTR _szVirtualProtect$[ebp+14], 0
; Line 244
	lea	eax, DWORD PTR _szLoadLibraryA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKernel32$[ebp]
	push	ecx
	call	?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ; MyGetProcAddress
	mov	DWORD PTR _pfnLoadLibraryA$[ebp], eax
; Line 245
	lea	edx, DWORD PTR _szGetProcAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernel32$[ebp]
	push	eax
	call	?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ; MyGetProcAddress
	mov	DWORD PTR _pfnGetProcAddress$[ebp], eax
; Line 246
	lea	ecx, DWORD PTR _szVirtualProtect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKernel32$[ebp]
	push	edx
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	DWORD PTR _pfnVirtualProtect$[ebp], eax
; Line 249
	mov	DWORD PTR _EndImpTable$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _EndImpTable$[ebp+4], eax
	mov	DWORD PTR _EndImpTable$[ebp+8], eax
	mov	DWORD PTR _EndImpTable$[ebp+12], eax
	mov	DWORD PTR _EndImpTable$[ebp+16], eax
; Line 250
	call	?GetMainMdouleHandle@@YAPAUHINSTANCE__@@XZ ; GetMainMdouleHandle
	mov	DWORD PTR _hModule$[ebp], eax
; Line 253
	mov	ecx, DWORD PTR _pDecomDataBuff$[ebp]
	mov	DWORD PTR _pDosHeader$[ebp], ecx
; Line 254
	mov	edx, DWORD PTR _pDosHeader$[ebp]
	movzx	eax, WORD PTR [edx+10]
	mov	DWORD PTR _pdwImport$[ebp], eax
; Line 255
	mov	ecx, DWORD PTR _pDosHeader$[ebp]
	movzx	edx, WORD PTR [ecx+20]
	mov	DWORD PTR _pdwIAT$[ebp], edx
; Line 258
	mov	eax, DWORD PTR _pDosHeader$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, DWORD PTR _pDecomDataBuff$[ebp]
	mov	DWORD PTR _pNtHeader$[ebp], ecx
; Line 260
	mov	edx, DWORD PTR _pNtHeader$[ebp]
	add	edx, 4
	mov	DWORD PTR _dwFileHeaderAddr$[ebp], edx
; Line 261
	mov	eax, DWORD PTR _pNtHeader$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _dwOptionalHeaderAddr$[ebp], eax
; Line 263
	mov	ecx, DWORD PTR _dwFileHeaderAddr$[ebp]
	mov	DWORD PTR _pFileHdr$[ebp], ecx
; Line 264
	mov	edx, DWORD PTR _pFileHdr$[ebp]
	movzx	eax, WORD PTR [edx+16]
	mov	DWORD PTR _dwSizeOfOptHdr$[ebp], eax
; Line 265
	mov	ecx, DWORD PTR _pFileHdr$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _dwNumOfSecs$[ebp], edx
; Line 267
	mov	eax, DWORD PTR _dwOptionalHeaderAddr$[ebp]
	mov	DWORD PTR _pOptionalHdr$[ebp], eax
; Line 268
	mov	ecx, DWORD PTR _dwOptionalHeaderAddr$[ebp]
	add	ecx, DWORD PTR _dwSizeOfOptHdr$[ebp]
	mov	DWORD PTR _pSecHdrs$[ebp], ecx
; Line 269
	mov	edx, DWORD PTR _pOptionalHdr$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _dwSizeOfHdrs$[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _pdwImport$[ebp]
	add	ecx, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _pImpTable$[ebp], ecx
; Line 275
	mov	edx, DWORD PTR _pOptionalHdr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _dwOEP$[ebp], eax
; Line 278
	mov	DWORD PTR _dwOldProtect$[ebp], 0
; Line 279
	lea	ecx, DWORD PTR _dwOldProtect$[ebp]
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _pOptionalHdr$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _hModule$[ebp]
	push	ecx
	call	DWORD PTR _pfnVirtualProtect$[ebp]
	test	eax, eax
	je	SHORT $LN23@HandlePE
	mov	BYTE PTR tv230[ebp], 1
	jmp	SHORT $LN24@HandlePE
$LN23@HandlePE:
	mov	BYTE PTR tv230[ebp], 0
$LN24@HandlePE:
	mov	dl, BYTE PTR tv230[ebp]
	mov	BYTE PTR _bRet$[ebp], dl
; Line 280
	movzx	eax, BYTE PTR _bRet$[ebp]
	test	eax, eax
	jne	SHORT $LN9@HandlePE
; Line 282
	xor	eax, eax
	jmp	$LN1@HandlePE
$LN9@HandlePE:
; Line 286
	mov	ecx, DWORD PTR _dwSizeOfHdrs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDecomDataBuff$[ebp]
	push	edx
	mov	eax, DWORD PTR _hModule$[ebp]
	push	eax
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 287
	push	90					; 0000005aH
	mov	ecx, DWORD PTR _SrcSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDecomDataBuff$[ebp]
	add	edx, DWORD PTR _SrcOffset$[ebp]
	push	edx
	call	?MyDecrypt@@YA_NPAEIK@Z			; MyDecrypt
	add	esp, 12					; 0000000cH
; Line 289
	mov	DWORD PTR _pSrcAddr$[ebp], 0
; Line 290
	mov	DWORD PTR _dwSizeToCpy$[ebp], 0
; Line 291
	mov	DWORD PTR _pDstAddr$[ebp], 0
; Line 292
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@HandlePE
$LN2@HandlePE:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@HandlePE:
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR _dwNumOfSecs$[ebp]
	jae	SHORT $LN3@HandlePE
; Line 294
	mov	edx, DWORD PTR _pSecHdrs$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _pDecomDataBuff$[ebp]
	mov	DWORD PTR _pSrcAddr$[ebp], eax
; Line 295
	mov	ecx, DWORD PTR _pSecHdrs$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _dwSizeToCpy$[ebp], edx
; Line 296
	mov	eax, DWORD PTR _pSecHdrs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _pDstAddr$[ebp], ecx
; Line 297
	mov	edx, DWORD PTR _dwSizeToCpy$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrcAddr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDstAddr$[ebp]
	push	ecx
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 298
	mov	edx, DWORD PTR _pSecHdrs$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _pSecHdrs$[ebp], edx
; Line 299
	jmp	SHORT $LN2@HandlePE
$LN3@HandlePE:
; Line 304
	mov	DWORD PTR _pDllName$[ebp], 0
; Line 305
	mov	DWORD PTR _dwINT$[ebp], 0
; Line 306
	mov	DWORD PTR _dwIAT$[ebp], 0
$LN5@HandlePE:
; Line 308
	mov	eax, 1
	test	eax, eax
	je	$LN6@HandlePE
; Line 311
	push	20					; 00000014H
	mov	ecx, DWORD PTR _pImpTable$[ebp]
	push	ecx
	lea	edx, DWORD PTR _EndImpTable$[ebp]
	push	edx
	call	?mymemcmp@@YAHPBX0I@Z			; mymemcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nRet$2[ebp], eax
; Line 312
	cmp	DWORD PTR _nRet$2[ebp], 0
	jne	SHORT $LN10@HandlePE
; Line 314
	jmp	$LN6@HandlePE
$LN10@HandlePE:
; Line 318
	mov	eax, DWORD PTR _pImpTable$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN11@HandlePE
; Line 320
	jmp	$LN6@HandlePE
$LN11@HandlePE:
; Line 322
	mov	ecx, DWORD PTR _pImpTable$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _pDllName$[ebp], edx
; Line 325
	mov	eax, DWORD PTR _pImpTable$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN13@HandlePE
; Line 327
	mov	ecx, DWORD PTR _pImpTable$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _pImpTable$[ebp], ecx
; Line 328
	jmp	SHORT $LN5@HandlePE
$LN13@HandlePE:
; Line 337
	mov	eax, DWORD PTR _pImpTable$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _dwIAT$[ebp], ecx
; Line 338
	mov	edx, DWORD PTR _dwIAT$[ebp]
	mov	DWORD PTR _dwINT$[ebp], edx
; Line 340
	mov	eax, DWORD PTR _pDllName$[ebp]
	push	eax
	call	DWORD PTR _pfnLoadLibraryA$[ebp]
	mov	DWORD PTR _hLib$6[ebp], eax
; Line 341
	cmp	DWORD PTR _hLib$6[ebp], 0
	jne	SHORT $LN14@HandlePE
; Line 343
	xor	eax, eax
	jmp	$LN1@HandlePE
$LN14@HandlePE:
; Line 353
	mov	ecx, DWORD PTR _dwIAT$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN7@HandlePE
; Line 355
	mov	edx, DWORD PTR _pImpTable$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _pImpTable$[ebp], edx
; Line 356
	jmp	$LN5@HandlePE
$LN7@HandlePE:
; Line 360
	mov	eax, DWORD PTR _dwINT$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN8@HandlePE
; Line 362
	mov	ecx, DWORD PTR _dwINT$[ebp]
	and	ecx, -2147483648			; 80000000H
	je	SHORT $LN16@HandlePE
; Line 364
	mov	edx, DWORD PTR _dwINT$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR _wOrder$4[ebp], ax
; Line 365
	movzx	ecx, WORD PTR _wOrder$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _hLib$6[ebp]
	push	edx
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	ecx, DWORD PTR _dwIAT$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 366
	mov	edx, DWORD PTR _dwIAT$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN18@HandlePE
; Line 368
	xor	eax, eax
	jmp	$LN1@HandlePE
$LN18@HandlePE:
; Line 371
	jmp	$LN17@HandlePE
$LN16@HandlePE:
; Line 381
	mov	eax, DWORD PTR _dwINT$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _pName$7[ebp], ecx
; Line 383
	mov	BYTE PTR _szTarget$5[ebp], 95		; 0000005fH
	mov	BYTE PTR _szTarget$5[ebp+1], 119	; 00000077H
	mov	BYTE PTR _szTarget$5[ebp+2], 99		; 00000063H
	mov	BYTE PTR _szTarget$5[ebp+3], 109	; 0000006dH
	mov	BYTE PTR _szTarget$5[ebp+4], 100	; 00000064H
	mov	BYTE PTR _szTarget$5[ebp+5], 108	; 0000006cH
	mov	BYTE PTR _szTarget$5[ebp+6], 110	; 0000006eH
	mov	BYTE PTR _szTarget$5[ebp+7], 0
; Line 384
	lea	edx, DWORD PTR _szTarget$5[ebp]
	push	edx
	mov	eax, DWORD PTR _pName$7[ebp]
	add	eax, 2
	push	eax
	call	?MyStrcmp@@YAHPBD0@Z			; MyStrcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@HandlePE
; Line 386
	mov	ecx, DWORD PTR _pName$7[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _hLib$6[ebp]
	push	edx
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	DWORD PTR _dwFuncAddr$1[ebp], eax
; Line 387
	mov	eax, DWORD PTR _dwFuncAddr$1[ebp]
	push	eax
	call	?HandleIAT@@YAKK@Z			; HandleIAT
	add	esp, 4
	mov	ecx, DWORD PTR _dwIAT$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 388
	mov	edx, DWORD PTR _dwIAT$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN21@HandlePE
; Line 390
	mov	eax, DWORD PTR _pName$7[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _hLib$6[ebp]
	push	ecx
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	edx, DWORD PTR _dwIAT$[ebp]
	mov	DWORD PTR [edx], eax
$LN21@HandlePE:
; Line 393
	jmp	SHORT $LN20@HandlePE
$LN19@HandlePE:
; Line 395
	mov	eax, DWORD PTR _pName$7[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _hLib$6[ebp]
	push	ecx
	call	DWORD PTR _pfnGetProcAddress$[ebp]
	mov	edx, DWORD PTR _dwIAT$[ebp]
	mov	DWORD PTR [edx], eax
$LN20@HandlePE:
; Line 398
	xor	eax, eax
	mov	ecx, DWORD PTR _pName$7[ebp]
	mov	WORD PTR [ecx], ax
; Line 399
	mov	edx, DWORD PTR _pName$7[ebp]
	add	edx, 2
	push	edx
	call	?MyStrlen@@YAKPBD@Z			; MyStrlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pName$7[ebp]
	add	eax, 2
	push	eax
	call	?EraseData@@YAXPADI@Z			; EraseData
	add	esp, 8
$LN17@HandlePE:
; Line 403
	mov	ecx, DWORD PTR _dwIAT$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dwIAT$[ebp], ecx
; Line 404
	mov	edx, DWORD PTR _dwINT$[ebp]
	add	edx, 4
	mov	DWORD PTR _dwINT$[ebp], edx
; Line 405
	jmp	$LN7@HandlePE
$LN8@HandlePE:
; Line 407
	mov	eax, DWORD PTR _pImpTable$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _hModule$[ebp]
	push	ecx
	call	?MyStrlen@@YAKPBD@Z			; MyStrlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pImpTable$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _hModule$[ebp]
	push	eax
	call	?EraseData@@YAXPADI@Z			; EraseData
	add	esp, 8
; Line 408
	mov	ecx, DWORD PTR _pImpTable$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _pImpTable$[ebp], ecx
; Line 409
	jmp	$LN5@HandlePE
$LN6@HandlePE:
; Line 415
	mov	eax, DWORD PTR _dwOEP$[ebp]
$LN1@HandlePE:
; Line 416
	mov	esp, ebp
	pop	ebp
	ret	0
?HandlePE@@YAKPAEKK@Z ENDP				; HandlePE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetMainMdouleHandle@@YAPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_hMainMdoule$ = -4					; size = 4
?GetMainMdouleHandle@@YAPAUHINSTANCE__@@XZ PROC		; GetMainMdouleHandle, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 420
	mov	DWORD PTR _hMainMdoule$[ebp], 0
; Line 422
	mov	eax, DWORD PTR fs:24
; Line 423
	mov	eax, DWORD PTR [eax+48]
; Line 424
	mov	eax, DWORD PTR [eax+12]
; Line 425
	mov	eax, DWORD PTR [eax+12]
; Line 426
	mov	eax, DWORD PTR [eax+24]
; Line 427
	mov	DWORD PTR _hMainMdoule$[ebp], eax
; Line 429
	mov	eax, DWORD PTR _hMainMdoule$[ebp]
; Line 430
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMainMdouleHandle@@YAPAUHINSTANCE__@@XZ ENDP		; GetMainMdouleHandle
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetKernel32@@YAPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_hKernel32$ = -4					; size = 4
?GetKernel32@@YAPAUHINSTANCE__@@XZ PROC			; GetKernel32, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 433
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 434
	mov	DWORD PTR _hKernel32$[ebp], 0
; Line 436
	mov	eax, DWORD PTR fs:24
; Line 437
	mov	eax, DWORD PTR [eax+48]
; Line 438
	mov	eax, DWORD PTR [eax+12]
; Line 439
	mov	eax, DWORD PTR [eax+12]
; Line 440
	mov	eax, DWORD PTR [eax]
; Line 441
	mov	eax, DWORD PTR [eax]
; Line 442
	mov	eax, DWORD PTR [eax+24]
; Line 443
	mov	DWORD PTR _hKernel32$[ebp], eax
; Line 445
	mov	eax, DWORD PTR _hKernel32$[ebp]
; Line 446
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKernel32@@YAPAUHINSTANCE__@@XZ ENDP			; GetKernel32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?mymemcmp@@YAHPBX0I@Z
_TEXT	SEGMENT
_buf1$ = 8						; size = 4
_buf2$ = 12						; size = 4
_count$ = 16						; size = 4
?mymemcmp@@YAHPBX0I@Z PROC				; mymemcmp, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 453
	push	ebp
	mov	ebp, esp
; Line 454
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN2@mymemcmp
; Line 455
	xor	eax, eax
	jmp	SHORT $LN1@mymemcmp
$LN2@mymemcmp:
; Line 457
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	je	SHORT $LN3@mymemcmp
	mov	ecx, DWORD PTR _buf1$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buf2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN3@mymemcmp
; Line 458
	mov	edx, DWORD PTR _buf1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buf1$[ebp], edx
; Line 459
	mov	eax, DWORD PTR _buf2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buf2$[ebp], eax
; Line 460
	jmp	SHORT $LN2@mymemcmp
$LN3@mymemcmp:
; Line 462
	mov	ecx, DWORD PTR _buf1$[ebp]
	movzx	eax, BYTE PTR [ecx]
	mov	edx, DWORD PTR _buf2$[ebp]
	movzx	ecx, BYTE PTR [edx]
	sub	eax, ecx
$LN1@mymemcmp:
; Line 463
	pop	ebp
	ret	0
?mymemcmp@@YAHPBX0I@Z ENDP				; mymemcmp
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?mymemcpy@@YAPAXPAXPBXI@Z
_TEXT	SEGMENT
_ret$ = -8						; size = 4
tv66 = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_count$ = 16						; size = 4
?mymemcpy@@YAPAXPAXPBXI@Z PROC				; mymemcpy, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 471
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
$LN2@mymemcpy:
; Line 475
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN3@mymemcpy
; Line 476
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 477
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$[ebp], eax
; Line 478
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 479
	jmp	SHORT $LN2@mymemcpy
$LN3@mymemcpy:
; Line 482
	mov	eax, DWORD PTR _ret$[ebp]
; Line 483
	mov	esp, ebp
	pop	ebp
	ret	0
?mymemcpy@@YAPAXPAXPBXI@Z ENDP				; mymemcpy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z
_TEXT	SEGMENT
_ArrayName$ = -96					; size = 20
_dwNumOfFunctions$ = -76				; size = 4
_lpExportFunc$ = -72					; size = 4
_AryExportFuncs$ = -68					; size = 4
_dwBase$ = -64						; size = 4
_AryNameOrdinals$ = -60					; size = 4
_iRet$1 = -56						; size = 4
_AryFuncNames$ = -52					; size = 4
tv87 = -48						; size = 4
tv188 = -44						; size = 4
_lpDataDirectoryExport$ = -40				; size = 4
_lpOptionalHeader$ = -36				; size = 4
_lpNTHeaders$ = -32					; size = 4
_dwNumOfNames$ = -28					; size = 4
tv185 = -24						; size = 4
_dwCountFunc$2 = -20					; size = 4
_lpExportTab$ = -16					; size = 4
_lpDosHeader$ = -12					; size = 4
_wOrdinal$ = -8						; size = 2
tv191 = -1						; size = 1
_hModule$ = 8						; size = 4
_lpProcName$ = 12					; size = 4
?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z PROC	; MyGetProcAddress, COMDAT
; File c:\users\administrator\desktop\c\cr31\Èý½×¶Î\¿Ç\20190125\shellcode\shellcode\shellcode.cpp
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
; Line 488
	mov	eax, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _lpDosHeader$[ebp], eax
; Line 489
	mov	ecx, DWORD PTR _lpDosHeader$[ebp]
	mov	edx, DWORD PTR _lpDosHeader$[ebp]
	add	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _lpNTHeaders$[ebp], edx
; Line 490
	mov	eax, DWORD PTR _lpNTHeaders$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _lpOptionalHeader$[ebp], eax
; Line 491
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _lpOptionalHeader$[ebp]
	lea	ecx, DWORD PTR [eax+edx+96]
	mov	DWORD PTR _lpDataDirectoryExport$[ebp], ecx
; Line 492
	mov	edx, DWORD PTR _lpDataDirectoryExport$[ebp]
	mov	eax, DWORD PTR _lpDosHeader$[ebp]
	add	eax, DWORD PTR [edx]
	mov	DWORD PTR _lpExportTab$[ebp], eax
; Line 495
	mov	ecx, DWORD PTR _lpExportTab$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _dwBase$[ebp], edx
; Line 496
	mov	eax, DWORD PTR _lpExportTab$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _dwNumOfFunctions$[ebp], ecx
; Line 497
	mov	edx, DWORD PTR _lpExportTab$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _dwNumOfNames$[ebp], eax
; Line 498
	mov	ecx, DWORD PTR _lpExportTab$[ebp]
	mov	edx, DWORD PTR _lpDosHeader$[ebp]
	add	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _AryExportFuncs$[ebp], edx
; Line 499
	mov	eax, DWORD PTR _lpExportTab$[ebp]
	mov	ecx, DWORD PTR _lpDosHeader$[ebp]
	add	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _AryFuncNames$[ebp], ecx
; Line 500
	mov	edx, DWORD PTR _lpExportTab$[ebp]
	mov	eax, DWORD PTR _lpDosHeader$[ebp]
	add	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _AryNameOrdinals$[ebp], eax
; Line 501
	mov	ecx, 65535				; 0000ffffH
	mov	WORD PTR _wOrdinal$[ebp], cx
; Line 504
	mov	BYTE PTR _ArrayName$[ebp], 0
	xor	edx, edx
	mov	DWORD PTR _ArrayName$[ebp+1], edx
	mov	DWORD PTR _ArrayName$[ebp+5], edx
	mov	DWORD PTR _ArrayName$[ebp+9], edx
	mov	DWORD PTR _ArrayName$[ebp+13], edx
	mov	WORD PTR _ArrayName$[ebp+17], dx
	mov	BYTE PTR _ArrayName$[ebp+19], dl
; Line 505
	mov	eax, DWORD PTR _lpProcName$[ebp]
	mov	DWORD PTR tv185[ebp], eax
	mov	ecx, DWORD PTR tv185[ebp]
	add	ecx, 1
	mov	DWORD PTR tv188[ebp], ecx
$LL10@MyGetProcA:
	mov	edx, DWORD PTR tv185[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv191[ebp], al
	add	DWORD PTR tv185[ebp], 1
	cmp	BYTE PTR tv191[ebp], 0
	jne	SHORT $LL10@MyGetProcA
	mov	ecx, DWORD PTR tv185[ebp]
	sub	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	push	edx
	mov	eax, DWORD PTR _lpProcName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ArrayName$[ebp]
	push	ecx
	call	?mymemcpy@@YAPAXPAXPBXI@Z		; mymemcpy
	add	esp, 12					; 0000000cH
; Line 509
	cmp	DWORD PTR _ArrayName$[ebp], 65535	; 0000ffffH
	jbe	SHORT $LN4@MyGetProcA
; Line 512
	mov	DWORD PTR _dwCountFunc$2[ebp], 0
$LN2@MyGetProcA:
; Line 513
	mov	edx, DWORD PTR _dwCountFunc$2[ebp]
	cmp	edx, DWORD PTR _dwNumOfNames$[ebp]
	jae	SHORT $LN3@MyGetProcA
; Line 515
	mov	eax, DWORD PTR _dwCountFunc$2[ebp]
	mov	ecx, DWORD PTR _AryFuncNames$[ebp]
	mov	edx, DWORD PTR _lpDosHeader$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _lpProcName$[ebp]
	push	eax
	call	?MyStrcmp@@YAHPBD0@Z			; MyStrcmp
	add	esp, 8
	mov	DWORD PTR _iRet$1[ebp], eax
; Line 516
	cmp	DWORD PTR _iRet$1[ebp], 0
	jne	SHORT $LN6@MyGetProcA
; Line 518
	jmp	SHORT $LN3@MyGetProcA
$LN6@MyGetProcA:
; Line 521
	mov	ecx, DWORD PTR _dwCountFunc$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _dwCountFunc$2[ebp], ecx
; Line 522
	jmp	SHORT $LN2@MyGetProcA
$LN3@MyGetProcA:
; Line 525
	mov	edx, DWORD PTR _dwCountFunc$2[ebp]
	cmp	edx, DWORD PTR _dwNumOfNames$[ebp]
	jb	SHORT $LN7@MyGetProcA
; Line 527
	xor	eax, eax
	jmp	SHORT $LN1@MyGetProcA
; Line 530
	jmp	SHORT $LN8@MyGetProcA
$LN7@MyGetProcA:
; Line 533
	mov	eax, DWORD PTR _dwCountFunc$2[ebp]
	mov	ecx, DWORD PTR _AryNameOrdinals$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _wOrdinal$[ebp], dx
$LN8@MyGetProcA:
; Line 538
	jmp	SHORT $LN5@MyGetProcA
$LN4@MyGetProcA:
; Line 540
	mov	eax, DWORD PTR _lpProcName$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR _wOrdinal$[ebp], ax
; Line 541
	movzx	ecx, WORD PTR _wOrdinal$[ebp]
	mov	edx, DWORD PTR _dwBase$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	sub	ecx, eax
	mov	WORD PTR _wOrdinal$[ebp], cx
$LN5@MyGetProcA:
; Line 545
	movzx	ecx, WORD PTR _wOrdinal$[ebp]
	mov	edx, DWORD PTR _AryExportFuncs$[ebp]
	mov	eax, DWORD PTR _lpDosHeader$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _lpExportFunc$[ebp], eax
; Line 547
	mov	eax, DWORD PTR _lpExportFunc$[ebp]
$LN1@MyGetProcA:
; Line 548
	mov	esp, ebp
	pop	ebp
	ret	8
?MyGetProcAddress@@YGP6GHXZPAUHINSTANCE__@@PBD@Z ENDP	; MyGetProcAddress
_TEXT	ENDS
END
